@using Bestellservice4.Shared.Transfer
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@page "/dishes/display"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "Customer, Company, Admin")]

<h3>Speisen</h3>
<AuthorizeView Roles="Admin">
    <Authorized>
        <NavLink class="btn btn-primary mb-2" href="/dishes/createEdit">Speise hinzufügen</NavLink>
    </Authorized>
    <NotAuthorized>
        <NavLink class="btn btn-primary mb-2 disabled" href="/dishes/createEdit">Speise hinzufügen</NavLink>
    </NotAuthorized>
</AuthorizeView>
@*(Example) Better: Dont show button at all if not Authorized or just make a disabled parameter instead of adding the button twice!*@


@if (Dishes != null)
{
    <div class="row row-cols-1 row-cols-md-5">
        @foreach (var dish in Dishes)
        {
            <div class="col">
                <div class="card mb-3">
                    @if (dish.ImageData != null)
                    {
                        string image = $"data:image/png;base64,{Convert.ToBase64String(dish.ImageData)}";
                        <img class="card-img-top" src="@image" />
                    }
                    <div class="card-body bg-light">
                        <h3 class="mb-0">@dish.Title</h3>
                        <p class="small mt-0">Erstellt am: @dish.Created</p>
                        <p class="mt-3">@dish.Description</p>
                        @foreach (var allergen in dish.Allergens)
                        {
                            <p>@allergen.Letter</p>
                        }

                        <button class="btn btn-warning mb-0 mt-2 @IsDisabled" @onclick="() => NavEdit(dish.Id)">Bearbeiten</button>
                        <button class="btn btn-danger mb-0 mt-2 @IsDisabled" @onclick="() => DeleteDish(dish.Id)">Löschen</button>
                        <button class="btn btn-primary mb-0 mt-2" @onclick="() => NavSingle(dish.Id)">Details</button>
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    private List<DishDto> Dishes { get; set; }
    private string? ImageString;
    private bool isAdmin;
    public string IsDisabled 
    {
        get
        {
            if (isAdmin)
                return "";
            else
                return "disabled";
        }
    }


    protected override async void OnInitialized()
    {
        if (authStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Admin"))
        {
            isAdmin = true;
        }

        Dishes = await Http.GetFromJsonAsync<List<DishDto>>("/data/dishes/all") ?? new List<DishDto>();
        StateHasChanged();
    }

    public async void DeleteDish(int id)
    {
        var response = await Http.DeleteAsync($"/data/dishes/{id}");
        if (response.IsSuccessStatusCode)
            Dishes.Remove(Dishes.Find(d => d.Id == id));
        StateHasChanged();
    }

    private void NavEdit(int dishId)
    {
        NavManager.NavigateTo("/dishes/createEdit/" + dishId);
    }

    private void NavSingle(int dishId)
    {
        NavManager.NavigateTo("/dishes/single/" + dishId);
    }
}
