@using Bestellservice4.Shared.Helper
@using Bestellservice4.Shared.Transfer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@page "/dishes/display"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "Customer, Company, Admin")]


<h3>Speisen</h3>
<AuthorizeView Roles="Admin">
    <Authorized>
        <NavLink class="btn btn-primary mb-2" href="/dishes/createEdit">Speise hinzufügen</NavLink>
    </Authorized>
    <NotAuthorized>
        <NavLink class="btn btn-primary mb-2 disabled" href="/dishes/createEdit">Speise hinzufügen</NavLink>
    </NotAuthorized>
</AuthorizeView>
@*(Example) Better: Dont show button at all if not Authorized or just make a disabled parameter instead of adding the button twice!*@


@if (Dishes != null)
{
    <div class="row row-cols-1 row-cols-md-5">
        @foreach (var dish in Dishes)
        {
            <div class="col">
                <div class="card mb-3">
                    @if (dish.ImageData != null)
                    {
                        string image = $"data:image/png;base64,{Convert.ToBase64String(dish.ImageData)}";
                        <img class="card-img-top" src="@image" />
                    }
                    <div class="card-body bg-light">
                        <h3 class="mb-0">@dish.Title</h3>
                        <p class="small mt-0">Erstellt am: @dish.Created</p>
                        <p class="mt-3">@dish.Description</p>
                        @foreach (var allergen in dish.Allergens)
                        {
                            <p>@allergen.Letter</p>
                        }
                        <button class="btn btn-warning mb-0 mt-2 @IsDisabled" @onclick="() => NavEdit(dish.Id)">Bearbeiten</button>
                        <button class="btn btn-danger mb-0 mt-2 @IsDisabled" @onclick="() => DeleteDish(dish.Id)">Löschen</button>
                        <button class="btn btn-primary mb-0 mt-2" @onclick="() => NavSingle(dish.Id)">Details</button>
                    </div>
                </div>
            </div>
        }
    </div>
}


@if (MetaData != null)
{
    <div class="btn-group">
        @if (MetaData.HasPrevious)
        {
            <button class="btn btn-light" @onclick="() => GetDishesPage(MetaData.CurrentPage - 1, 2)">Prev</button>
        }
        @for (var i = 1; i <= MetaData.TotalPages; i++)
        {
            var local_i = i;
            @if (MetaData.CurrentPage == i)
            {           
                <button class="btn btn-primary" @onclick="() => GetDishesPage(local_i, 2)">@i</button>
            }
            else
            {
                <button class="btn btn-light" @onclick="() => GetDishesPage(local_i, 2)">@i</button>
            }
        }
         @if (MetaData.HasNext)
        {
            <button class="btn btn-light" @onclick="() => GetDishesPage(MetaData.CurrentPage + 1, 2)">Next</button>
        }
    </div>
    <EditForm Model="MetaData">
        <InputNumber class="form-control" @bind-Value="MetaData.PageSize"></InputNumber>
    </EditForm>
}




@code {
    private List<DishDto>? Dishes { get; set; }
    public PageMetaData? MetaData { get; set; }
    private string? ImageString;
    private bool isAdmin;
    public string IsDisabled
    {
        get
        {
            if (isAdmin)
                return "";
            else
                return "disabled";
        }
    }


    protected override async void OnInitialized()
    {
        if (authStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Admin"))
        {
            isAdmin = true;
        }

        await GetDishesPage(1, 2);
        //Dishes = await Http.GetFromJsonAsync<List<DishDto>>("/data/dishes/all") ?? new List<DishDto>();
        //StateHasChanged();
    }

    public async Task GetDishesPage(int page, int size)
    {
        var queryStringParams = new Dictionary<string, string>()
            {
                ["page-current"] = page.ToString(),
                ["page-size"] = size.ToString()
            };

        var response = await Http.GetAsync(QueryHelpers.AddQueryString("/data/dishes/page", queryStringParams));
        var responseString = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new HttpRequestException();
        }
        Dishes = JsonConvert.DeserializeObject<List<DishDto>>(responseString);
        MetaData = JsonConvert.DeserializeObject<PageMetaData>(response.Headers.GetValues("Page-Metadata").First());
        StateHasChanged();
    }

    public async void DeleteDish(int id)
    {
        var response = await Http.DeleteAsync($"/data/dishes/{id}");
        if (response.IsSuccessStatusCode)
            Dishes.Remove(Dishes.Find(d => d.Id == id));
        StateHasChanged();
    }

    private void NavEdit(int dishId)
    {
        NavManager.NavigateTo("/dishes/createEdit/" + dishId);
    }

    private void NavSingle(int dishId)
    {
        NavManager.NavigateTo("/dishes/single/" + dishId);
    }
}
